# -*- coding: utf-8 -*-
"""Gauss Method for LinearSolve System_Diagonalise_Matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h4bbSVUIKLvlX430wALHoCIDeyDJzL_E
"""

# @title this is Gauss method!
import numpy as np

n = 4
h = np.random.sample((n, n))
d = np.random.sample(n)
ham = [[h[i][j] for j in range(n)] for i in range(n)]
print("Determinant of matrix (Numpy) \n", "det = ", np.linalg.det(h), "\n")
print("Solve (numpy) :\n", np.linalg.solve(h, d), "\n")

"""
We have Ax = b, where A - matrix, b - vector, x - unknown vector
"""


# String Swapper: if diag element = 0 -> swap
def Swapper_matr_full(A: list, b: list) -> list:
    p = len(A)
    for i in range(p):
        if A[i][i] == 0:
            for k in range(i + 1, p):
                if A[k][i] != 0:
                    A[i], A[k] = A[k], A[i]
                    b[i], b[k] = b[k], b[i]
    return A, b


# Gauss_method
def Gauss_method_func_full(A: list, b: list) -> list:
    p = len(A)
    A, b = Swapper_matr_full(A, b)
    for k in range(p - 1):
        for i in range(k + 1, p):
            if A[i][k] != 0 and A[k][k] != 0:
                global pre
                pre = (A[i][k] / A[k][k])
                b[i] -= pre * b[k]
                for j in range(k, p):
                    A[i][j] -= pre * A[k][j]
    return A, b


# Reverse_method to find X_C
def backstep_full(A: list, b: list) -> list:
    p = len(A)
    x_c = [0] * p
    x_c[p - 1] = Gauss_method_func_full(A, b)[1][p - 1] / Gauss_method_func_full(A, b)[0][p - 1][p - 1]
    for k in range(1, p):
        s = 0
        for i in range(p - k, p):
            s = s + Gauss_method_func_full(A, b)[0][p - k - 1][i] * x_c[i]
        x_c[p - k - 1] = 1 / (Gauss_method_func_full(A, b)[0][p - k - 1][p - k - 1]) * (
                    Gauss_method_func_full(A, b)[1][p - k - 1] - s)
    return x_c


# Diag Matrix ( if you don't want to realise backstep_full func)
def Diagonal_matrix_full(A: list, b: list):
    return Gauss_method_func_full(np.transpose(Gauss_method_func_full(A, [0] * len(A))[0]), [0] * len(A))[0]


# Test
print("Numerical :\n", backstep_full(h, d), "\n")
o = Diagonal_matrix_full(ham, d)
det = 1
for i in range(n):
    det = det * o[i][i]

print("Determinant of matrix (Numerical) : \n", "det = ", det, "\n")